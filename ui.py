import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from db import get_enterprises, add_enterprise, get_financial_data, add_financial_data
from calculations import calculate_coefficients
from reports import export_to_excel

class FinancialApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏")
        self.geometry("800x600")

        self.selected_enterprise_id = None

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        top_frame = ttk.Frame(self)
        top_frame.pack(pady=10, fill="x")

        ttk.Label(top_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ:").pack(side="left", padx=5)

        self.enterprise_combo = ttk.Combobox(top_frame, state="readonly", width=40)
        self.enterprise_combo.pack(side="left", padx=5)
        self.enterprise_combo.bind("<<ComboboxSelected>>", self.on_enterprise_selected)

        ttk.Button(top_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=self.add_enterprise_dialog).pack(side="left", padx=5)
        ttk.Button(top_frame, text="üìä –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", command=self.add_financial_data_dialog).pack(side="left", padx=5)
        ttk.Button(top_frame, text="üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", command=self.calculate_and_show).pack(side="left", padx=5)
        ttk.Button(top_frame, text="üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç", command=self.export_report).pack(side="left", padx=5)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        columns = ("period", "current_ratio", "autonomy_ratio", "debt_ratio", "profit_sales", "profit_assets", "summary")
        self.tree = ttk.Treeview(self, columns=columns, show="headings", height=20)
        self.tree.pack(fill="both", expand=True, pady=10)

        self.tree.heading("period", text="–ü–µ—Ä–∏–æ–¥")
        self.tree.heading("current_ratio", text="–¢–µ–∫. –ª–∏–∫–≤–∏–¥.")
        self.tree.heading("autonomy_ratio", text="–ê–≤—Ç–æ–Ω–æ–º–∏—è")
        self.tree.heading("debt_ratio", text="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å")
        self.tree.heading("profit_sales", text="–†–µ–Ω—Ç–∞–±. –ø—Ä–æ–¥–∞–∂ (%)")
        self.tree.heading("profit_assets", text="–†–µ–Ω—Ç–∞–±. –∞–∫—Ç–∏–≤–æ–≤ (%)")
        self.tree.heading("summary", text="–û—Ü–µ–Ω–∫–∞")

        # –ü–æ–¥–≥–æ–Ω —à–∏—Ä–∏–Ω—ã
        for col in columns:
            self.tree.column(col, width=110, anchor="center")

        self.load_enterprises()

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –≤ ComboBox ---
    def load_enterprises(self):
        enterprises = get_enterprises()
        self.enterprise_combo["values"] = [f"{row[0]}: {row[1]}" for row in enterprises]
        if enterprises:
            self.enterprise_combo.current(0)
            self.selected_enterprise_id = enterprises[0][0]

    # --- –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è ---
    def on_enterprise_selected(self, event):
        val = self.enterprise_combo.get()
        if val:
            self.selected_enterprise_id = int(val.split(":")[0])

    # --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è ---
    def add_enterprise_dialog(self):
        name = simpledialog.askstring("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ", "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:")
        if name:
            add_enterprise(name)
            self.load_enterprises()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

    # --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
    def add_financial_data_dialog(self):
        if not self.selected_enterprise_id:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ.")
            return

        dialog = FinancialDataDialog(self, self.selected_enterprise_id)
        self.wait_window(dialog)
        self.calculate_and_show()

    # --- –†–∞—Å—á—ë—Ç –∏ –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã ---
    def calculate_and_show(self):
        if not self.selected_enterprise_id:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ.")
            return

        self.tree.delete(*self.tree.get_children())

        rows = get_financial_data(self.selected_enterprise_id)
        if not rows:
            messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            return

        for row in rows:
            res = calculate_coefficients(row)
            self.tree.insert("", "end", values=(
                res["period"],
                f"{res['current_ratio']:.2f}",
                f"{res['autonomy_ratio']:.2f}",
                f"{res['debt_ratio']:.2f}",
                f"{res['profitability_sales']:.2f}",
                f"{res['profitability_assets']:.2f}",
                res["summary"]
            ))
            
    def export_report(self):
        if not self.selected_enterprise_id:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ.")
            return
        val = self.enterprise_combo.get()
        if not val:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ.")
            return
        enterprise_name = val.split(":")[1].strip()
        export_to_excel(self.selected_enterprise_id, enterprise_name)
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Excel.")

# --- –û–∫–Ω–æ –≤–≤–æ–¥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
class FinancialDataDialog(tk.Toplevel):
    def __init__(self, parent, enterprise_id):
        super().__init__(parent)
        self.title("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        self.enterprise_id = enterprise_id
        self.resizable(False, False)

        fields = [
            ("–ü–µ—Ä–∏–æ–¥", "period"),
            ("–ê–∫—Ç–∏–≤—ã", "assets"),
            ("–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "liabilities"),
            ("–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª", "equity"),
            ("–ü—Ä–∏–±—ã–ª—å", "profit"),
            ("–í—ã—Ä—É—á–∫–∞", "revenue"),
            ("–û–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã", "current_assets"),
            ("–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "current_liabilities")
        ]

        self.entries = {}
        for i, (label_text, field) in enumerate(fields):
            ttk.Label(self, text=label_text + ":").grid(row=i, column=0, padx=5, pady=3, sticky="e")
            entry = ttk.Entry(self)
            entry.grid(row=i, column=1, padx=5, pady=3)
            self.entries[field] = entry

        ttk.Button(self, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_data).grid(row=len(fields), column=0, columnspan=2, pady=10)

    def save_data(self):
        try:
            period = self.entries["period"].get().strip()
            assets = float(self.entries["assets"].get())
            liabilities = float(self.entries["liabilities"].get())
            equity = float(self.entries["equity"].get())
            profit = float(self.entries["profit"].get())
            revenue = float(self.entries["revenue"].get())
            current_assets = float(self.entries["current_assets"].get())
            current_liabilities = float(self.entries["current_liabilities"].get())
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —á–∏—Å–µ–ª.")
            return

        add_financial_data(
            self.enterprise_id,
            period,
            assets,
            liabilities,
            equity,
            profit,
            revenue,
            current_assets,
            current_liabilities
        )

        messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        self.destroy()
    
